2.1 线程IO模型
    redis是一个单线程程序

    redis的所有数据都在内存中，所有的运算都是内存级别的运算，所以快

    redis既然是单线程，为何能处理那么多的并发客户端连接？
        1.非阻塞IO
        2.事件轮询（多路复用）


2.2 通信协议
    redis使用了文本通信协议 ： RESP（Redis Serializtion Protocol）

2.3 持久化
    redis的持久化机制
        1. 快照/rdb snapshot（全量备份）
            内存数据的二进制序列化形式
        2. AOF日志（连续的增量备份）
            内存数据修改的指令记录文本

    快照原理
        redis使用操作系统的多进程COW（Copy On Write）机制来实现快照持久化
        redis在持久化时会调用glibc的函数fork产生一个子进程，快照持久化完全交个子进程来处理

        子进程做数据持久化，仅遍历读取数据结构，然后序列化写到磁盘中
        父进程持续服务客户端请求，然后对内存数据结构进行不间断的修改，当父进程对其中一个页面的数据进行修改时，
        会将被共享的页面复制一份分离出来，然后对这个复制的页面进行修改，这时子进程相应的页面是没有变化的

    AOF原理
        AOF日志记录的是redis服务器的顺序指令序列，AOF日志只记录对内存进行修改的指令记录

        是先执行指令再将日志存盘

        AOF重写
            开辟一个子进程对内存进行遍历，转换成一系列reids的操作指令，序列化到一个新的AOF日志文件中
            序列化完毕后再将操作期间发生的增量AOF日志追加到新的AOF日志文件中，替代旧的AOF日志文件，完成瘦身


    因为持久化是一个比较耗资源的操作，所以通常redis的主节点不会进行持久化操作，持久化操作主要在从节点进行

    在redis4.0中混合使用了两种持久化，先加载rdb的内容，然后重放增量AOF日志


2.5 事务
    基本用法
        multi // 开始事务
        exec // 执行事务
        discard // 丢弃事务

    所有的指令在exec之前不执行，而是缓存在服务器的一个事务队列中，知道收到exec才开始执行
    因为redis的单线程特性，可以保证得到“原子性”执行

    实际上redis事务根本不具备“原子性”，而仅仅满足“隔离性”中的串行化

    watch
        分布式锁是一种悲观锁，watch机制是一种乐观锁

        watch会在事务开始前盯住一个或多个关键变量，当事务执行时（exec），redis会检查自watch之后是否被修改了。若被修改了，则事务执行失败


2.6 PubSub
    为了支持消息多播，redis单独提供了PubSub模块

    命令：
        subscribe
        publish
        psubscribe // 模式订阅
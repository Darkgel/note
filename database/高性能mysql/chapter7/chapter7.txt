第七章 mysql高级特性

分区表
    分区的一个主要目的是将数据按照一个较粗的粒度分在不同的表中。这样做就可以将相关的数据存放在一起，另外，如果想一次批量删除整个分区的数据也会变得很方便。

    在以下场景中可以使用分区：
        1.表非常大以至于无法全部都放在内存中，或者只在表的最后部分有热点数据，其他均是历史数据
        2.分区表的数据更容易维护。例如，想批量删除大量数据可以使用清除整个分区的方式。另外，还可以对一个独立分区进行优化，检查，修复等操作
        3.分区表的数据可以分布在不同的物理设备上，从而高效地利用多个硬件设备
        4.可以使用分区表来避免某些特殊地瓶颈，例如InnoDB地单个索引地互斥访问，ext3 文件系统的 inode 锁竞争
        5.如果需要，还可以备份和恢复独立的分区，这在非常大的数据集的场景下效果非常好

    创建分区表的例子
        CREATE TABLE sales(
            order_date DATETIME NOT NULL,
            -- other columns omitted
        ) ENGINE=InnoDB PARTITION BY RANGE(YEAR(order_date)) (
            PARTITION p_2010 VALUES LESS THAN (2010),
            PARTITION p_2011 VALUES LESS THAN (2011),
            PARTITION p_2012 VALUES LESS THAN (2012),
            PARTITION p_catch VALUES LESS THAN MAXVALUE );

    在数据量超大的时候，B-Tree索引就无法起作用了。除非是索引覆盖查询，否则数据库服务器需要根据索引扫描的结果回表，查询所有符合条件的记录，如果数据量巨大，这将
    产生大量随机I/O，随之，数据库的响应时间将大到不可接受的程度。

    为了保证大数据量的可扩展性，一般有下面两个策略：
        1.全量扫描数据，不要任何索引
            使用简单的分区方式存放表，不要任何索引，根据分区的规则大致定位需要的数据位置。（警告：必须将查询需要扫描的的分区的个数限制在一个很小的数量）

        2.索引数据，并分离热点
            若数据有明显的“热点”，那么可以将这部分热点数据单独放在一个分区中，让这个分区的数据能够有机会都缓存在内存中。

    分区实现中的一些限制：
        1.所有分区都必须使用相同的存储引擎
        2.分区函数中可以使用的函数和表达式也有一些限制
        3.某些存储引擎不支持分区
        4.对于MyISAM的分区表，不能再使用LOAD INDEX INTO CACHE操作
        5.对于MyISAM表，使用分区表时需要打开更多的文件描述符。


    
外键约束
    InnoDB是目前 mysql中唯一支持外键的内置存储引擎
    InnoDB强制外键使用索引
    如果只是使用外键做约束，通常在应用程序中实现该约束会更好。外键会带来很大的额外消耗


在mysql内部存储代码
    mysql允许通过触发器，存储过程，存储函数，事件的形式来存储代码


游标
    mysql在服务器端提供只读的，单向的游标，而且只能在存储过程或者更底层的客户端api中使用。因为mysql游标中指向的对象都是存储在临时表中而不是实际查询到的数据，
    所以mysql游标总是只读的。


绑定变量  
    当创建一个绑定变量SQL时，客户端向服务器发送了一个SQL语句的原型。服务器端收到这个SQL语句框架后，解析并存储这个SQL语句的部分执行计划，返回给客户端一个SQL语句处理句柄。
    以后每次执行这类查询，客户端都指定使用这个句柄。


字符集和校对
    字符集：是指一种从二进制编码到某类字符符号的映射（eg： 使用一个字节来表示英文字母）
    校对： 是指一组用于某个字符集的排序规则（一种字符集可能有多种校对规则，并且都有一个默认的校对规则）

    mysql的设置可以分为两类：
        1.创建对象时的默认值
            mysql服务器有默认的字符集和校对规则；每个数据库也有自己的默认值；每个表也有自己的默认值。这是一个逐层继承的默认设置。

        2.在服务器和客户端通信时的设置
            当服务器和客户端通信的时候，它们可能使用不同的字符集。这时，服务器端将进行必要的翻译转换工作：
                1.服务器端总是假设客户端时按照character_set_client 设置的字符来传输数据和SQL语句的。
                2.当服务器收到客户端的SQL语句时，它先将其转换成字符集character_set_connection.它还使用这个设置来决定如何将数据转换成字符串
                3.当服务器端返回数据或者错误信息给客户端时，它会将其转换成character_set_result

        可以使用SET NAMES 或者SET CHARACTER SET语句来改变上面的设置。不过在服务器上使用这个命令只能改变服务器端的设置。客户端程序和客户端的API也需要使用正确的字符集
        才能避免在通信时出现问题。



全文索引
    全文索引的使用场景：通过关键字的匹配来进行查询过滤

    在标准的mysql中，只有MyISAM引擎支持全文索引。不过在mysql5.6中innoDB已经实验性地支持全文索引了


分布式（XA）事务
    XA事务中需要有一个事务协调器来保证所有的事务参与者都完成了准备工作（第一阶段）。
    如果协调器收到所有的参与者都准备好的消息，就会告诉所有的事务可以提交了（第二阶段）。

    MySQL中各个存储引擎是完全独立的，彼此不知道对方的存在，所以一个跨存储引擎的事务就需要一个外部的协调者

    XA事务是一种在多个服务器之间同步数据的方法


查询缓存
    “查询缓存” ： 缓存完整的SELECT查询结果

    查询缓存系统会跟踪查询中涉及的每个表，如果这些表发生变化，那么和这个表相关的所有缓存数据都将失效。（该机制虽然效率低，但代价小）
    查询缓存对应用程序是完全透明的，应用程序无需关心mysql是通过查询缓存返回的结果还是实际执行返回的结果，因为两者完全相同

    子查询和存储过程没办法使用查询缓存
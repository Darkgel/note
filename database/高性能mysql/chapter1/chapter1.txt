第一章 MySQL架构与历史

MySQL服务器逻辑架构
    图片 ： H:\notes_git\database\高性能mysql\mysql服务器逻辑架构图.png
    最上层：
        非mysql所独有的，大多数基于网络的客户端/服务器的工具或者服务都有类似的架构。比如连接处理，授权认证，安全等
    第二层：
        大多数mysql的核心服务功能都在这一层，包括查询解析，分析，优化，缓存以及所有的内置函数，所有跨存储引擎的功能都在这一层实现：存储过程，触发器，视图等
    第三层：
        包含存储引擎。存储引擎负责mysql 中数据的存储和提取。服务器通过api与存储引擎进行通信。存储引擎api包含几十个底层函数，用于执行诸如“开始一个事务”或者
        “根据主键提取一行记录”等操作。但存储引擎不会取解析sql，不同存储引擎之间也不会相互通信，而只是简单地响应上层的服务器的请求

连接管理
    每个客户端连接都会在服务器进程中拥有一个线程，这个连接的查询指挥在这个单独的线程中执行，该线程只能轮流在某个CPU核心或者CPU中运行
    服务器会负责缓存线程，因此不需要为每一个新建的连接创建或者销毁线程

并发控制
    两个层面的并发控制：服务器层与存储引擎层

    在处理并发读或者写时，可以通过实现一个由两种类型的锁组成的锁系统来解决问题（即共享锁/读锁，排他锁/写锁） 

    锁粒度
        尽量锁定需要修改的部分数据，而不是所有的资源。更理想的方式是，只对会修改的数据片进行精确的锁定。任何时候，在给定的资源上，锁定的数据量越小，则系统的并发程度越高，
        只要相互之间不发生冲突即可

    每种mysql存储引擎都可以实现自己的锁策略和锁粒度

    两种最重要的锁策略
        1.表锁
            表锁是mysql中最基本的锁策略，并且是开销最小的策略。它会锁定整张表
            写锁比读锁由更高的优先级，因此一个写锁请求可能会别插入到读锁队列的前面（反之不行）

        1.行级锁
            行级锁可以最大程度地支持并发处理（同时也带来了最大的锁开销）
            行级锁只在存储引擎层实现，而mysql服务器层没有实现
    
事务
    ACID
        原子性（atomicity）
            一个事务必须被视为一个不可分割地最小工作单元,整个事务中的所有操作要么全部提交成功,要么全部失败回滚.
        一致性(consistency)
            数据库总是从一个一致性状态转换到另外一个一致性状态.
        隔离性(isolation)
            通常来说,一个事务所做的修改在最终提交以前,对其他事务是不可见的.(实际上隔离级别有点复杂)
        持久性(durability)
            一旦事务提交,则其所作的修改就会永久保存到数据库中.

    隔离级别
        在sql标准中定义了四种隔离级别,每一种级别都规定了一个事务中所做的修改,哪些在事务内和事务间是可见的,哪些是不可见的.较低的隔离通常可以执行更高的并发,系统的开销也更低

        READ UNCOMMITTED(未提交读)
            在该级别中,事务中的修改,即使没有提交,对其他事务也都是可见的.会出现脏读(事务可以读取未提交的数据)

        READ COMMITTED(提交读)
            该级别满足前面地套的隔离性的简单定义:一个事务开始时,只能"看见"已经提交的事务所做的修改.(即,一个事务从开始知道提交之前,所做的任何修改对其他事务都是不可见的)

        REPEATABLE READ(可重复读)
            该级别解决了脏读的问题.该级别保证了在同一个事务中多次读取同样记录的结果是一致的.但理论上无法解决幻读(指的是当某个事务在读取某范围内的记录时,另外一个事务又在该范围内
            插入了新的记录,当之前的事务再次读取该范围的记录时,会产生幻行)的问题.可重复读时mysql的默认事务隔离级别

        SERIALIZABLE(可串行化)
            最高的隔离级别.它通过强势事务串行化执行,避免了前面说的幻读问题.见到那来说,它会在读取的每一行数据上都加锁,所以可能导致大量的超时和锁争用的问题

    InnoDB目前处理死锁的方法是,将持有最少行级排他锁的事务进行回滚

    事务日志
        事务日志可以提高事务的效率.使用事务日志,存储引擎在修改表的数据时只需要修改其在内存中的拷贝,在把该修改行为记录到持旧在硬盘上的事务日志中,而不用每次都将修改的数据
        本身持久到磁盘.

    mysql提供了两种事务型的存储引擎:InnoDB和NDB Cluster
        自动提交(autocommit)
            mysql默认采用自动提交的模式.(即,如果不是显式地开始一个事务,则每个查询都被当作一个事务执行提交操作)
            SHOW VARIABLES LIKE 'AUTOCOMMIT';
            SET AUTOCOMMIT = 1;

            对于非事务型地表(MyISAM或内存表),修改AUTOCOMMIT不会有任何影响

            设置隔离级别(MySQL能够识别所有的4个ansi隔离级别,InnoDB引擎也支持所有的隔离级别)
                SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;

    隐式和显式锁定
        InnoDB采用的是两阶段锁定协议(two-phase locking protocol).在事务执行过程中,随时都可以执行锁定,锁只有在执行commit或者rollback的时候才会释放,
        并且所有的锁都是在同一个时刻别释放.InnDB会根据隔离级别在需要的时候自动加锁

        显式锁定
            SELECT ... LOCK IN SHARE MODE
            SELECT ... FOR UPDATE
            LOCK TABLES / UNLOCK TABLES

多版本并发控制(MVCC)
    可以认为MVCC是行级锁的一个变种,但是它在很多情况下避免了加锁操作,因此开销更低

    InnoDB的MVCC,是通过在每行记录后面保存连个隐藏的列来实现的.这两个列,一个保存了行的创建时间(系统版本号),一个保存行的过期时间/删除时间.保存这连个额外的系统版本号,使大多数
    读操作都可以不用加锁

    MVCC只在 REPEATABLE READ和READ COMMITTED两个隔离级别下工作.其他连个隔离级别都和MVCC不兼容.因为READ UNCOMMITTED总是读取最新的数据行,而不是
    符合当前事务版本的数据行.而SERIALIZABLE则会对所有读取的行都加锁


mysql的存储引擎
    在文件系统中,mysql将每个数据库(schema)保存为数据目录下的一个子目录.创建表时,mysql会在数据库子目录下创建一个和表同名的.frm文件保存表的定义.
    不同的存储引擎保存数据和索引的方式是不同的,但是表的定义则是在mysql服务器层统一处理的

    InnoDB存储引擎
        InnoDB的数据存储在表空间中(tablespace),表空间是由InnoDB管理的一个黑盒子,由一系列的数据文件组成.

        InnoDB采用MVCC来支持高并发,并且实现了四个标准的隔离级别.默认级别是REPEATABLE READ ,并且通过间隙锁(next-key locking)策略防止幻读的出现.
        间隙锁使得InnoDB不仅仅锁定查询涉及的行,还会对索引中的间隙进行锁定,以防止幻影行的插入

        InnoDb表基于聚簇索引建立

    MyISAM存储引擎
        特性包括全文索引,压缩,空间函数等.但不支持事务和行级锁.而且有一个缺陷:崩溃后无法安全恢复

        存储
            MyISAM会将表存储在两个文件中:数据文件和索引文件,分别以.MYD和.MYI为扩展名

        加锁与并发
            对整张表加锁,而不是针对行.

        索引特性
            对于MyISAM表,即使是BLOB和TEXT等长字段,也可以基于其前500个字符创建索引;支持全文索引

    转换表的引擎
        三种方法
        1.ALTER TABLE
            ALTER TABLE mytable ENGINE = InnoDB
            存在问题:需要执行很长时间.mysql会按行将数据从原表复制到一张新的表中;会丢失和原引擎相关的所有特性.

        2.导入与导出
            将数据导出后,修改文件中的CREATE TABLE语句的存储引擎选项(注意同时修改表ing,因为同一个数据库中不能存在相同的表名,即使他们使用不同的存储引擎)

        3.创建与查询
            CREATE TABLE innodb_table LIKE myisam_table;
            ALTER TABLE innodb_table ENGINE=InnoDB;
            INSERT INIO innodb_table SELECT * FROM myisam_table;

            数据量大的话,可以分批处理
                START TRANSACTION;
                INSERT INTO innodb_table SELECT * FROM myisam_talble WHERE id BETWEEN x AND y;
                COMMIT;

            如果有需要,可以在执行过程中对原表加锁,以确保新表和原表的数据一致.
第三章 文件

3.1 参数文件
    配置文件位置 ： mysql --help | grep my.cnf
    可以通过 SHOW VARIABLES 查看数据库中的所有参数

    参数类型 ：     
        1. 动态参数
            SET
            | [global | session] system_var_name= expr
            | [@@global. | @@session. | @@]system_var_name= expr

            global : 实例的生命周期
            session ： 当前会话

        2. 静态参数

3.2 日志文件
        错误日志文件（error log），二进制日志文件（binary log），慢查询日志文件（slow query log），查询日志文件（general log）

        错误日志
            SHOW VARIABLES LIKE 'log_error';

        慢查询日志
            SHOW VARIABLES LIKE 'slow_query_log_file';//慢查询日志位置
            SHOW VARIABLES LIKE 'long_query_time';//查看慢查询时间阈值
            SHOW VARIABLES LIKE 'log_slow_queries';//查看是否开启慢查询日志，默认不开启
            SHOW VARIABLES LIKE 'log_slow_queries';//为ON表示，如果运行的SQL语句没有使用索引，则同样记录到慢查询日志中
            SET GLOBAL log_output='TABLE';//默认为FILE，即输出成文件，TABLE时对应表mysql.slow_log

            分析慢查询日志
                mysqldumpslow xxx.log

        查询日志
            记录了所有对mysql数据库请求的信息，无论这些请求是否得到了正确的执行

            SHOW VARIABLES LIKE 'general_log';
            SHOW VARIABLES LIKE 'general_log_file';

        二进制日志
            记录了对数据库执行更改的所有操作，但是不包含SELECT和SHOW这类操作

            SHOW VARIABLES LIKE 'log_bin';//是否开启，所在路径为数据库所在目录（datadir）

            二进制日志主要有以下几种作用：
                1.恢复（recovery） ： 在一些情况下可以使用二进制日志进行数据恢复
                2.复制（replication） ： 原理与恢复类似，通过复制和执行二进制文件来进行同步
                3.审计（audit）：通过日志判断是否有对数据库进行注入攻击

            binlog_format可选值 ： STATEMENT，ROW，MIXED

3.3 套接字文件
    SHOW VARIABLES LIKE 'socket';


3.4 pid文件
    SHOW VARIABLES LIKE 'pid_file';


3.5 表结构定义文件
    不论表采用哪种存储引擎，mysql都有一个以frm为后缀名的文件，这个文件记录了该表的表结构定义。（frm还用来存放视图的定义）


3.6 InnoDB存储引擎文件
    每个表存储引擎还有其自己独有的文件。例如InnoDB存储引擎有 ： 重做日志文件，表空间文件。

    1.表空间文件
        InnoDB采用将存储的数据按表空间（tablespace）进行存放的设计。分为共享表空间和独立表空间（.ibd）

    2.重做日志文件
        在数据目录下的ib_logfile0，ib_logfile1，重做日志文件对于InnoDB很重要，因为他们记录了对于InnoDB存储引擎的事务日志

        相关变量 ： innodb_log_*

        重做日志与二进制日志的区别：
            1. 二进制日志会记录所有与mysql数据库相关的日志记录，包括InnoDB，MyISAM，Heap等其他存储引擎的日志；而重做日志只记录有关该存储引擎本身的事务日志。
            2. 记录的内容不同，二进制日志记录的是关于一个事务的具体操作内容，即该日志是逻辑日志；而重做日志文件记录的是关于每个页的更改的物理情况。
            3. 写入的时间不同，二进制文件仅在事务提交前进行提交，即只写磁盘一次，不论这时事务多大；而在事务进行的过程中，却不断有重做日志条目被写入到重做日志文件中。

        因为重做日志的存在，才使得InnoDB存储引擎可以提供可靠的事务。
第二章 InnoDB存储引擎

2.1 InnoDB存储引擎概述
    特点 ： 行锁设计，支持MVCC， 支持外键， 提供一致性非锁定读，同时被设计用来最有效地利用以及使用内存和CPU


2.2 InnoDB存储引擎的版本
    老版本InnoDB ： 支持ACID，行锁设计，MVCC
    1.0.x ： 继承的基础上，增加了compress和dynamic页格式
    1.1.x ： 继承的基础上，增加了Linux AIO，多回滚段
    1.2.x ： 继承的基础上，增加了全文索引，在线索引添加


2.3 InnoDB体系架构
    看图 ： ./InnoDB存储引擎体系架构.png
        内存池的作用 :
            1. 维护所有进程/线程需要访问的多个内部数据结构
            2. 缓存磁盘上的数据，方便快速地读取，同时在对磁盘文件地数据修改之前在这里缓存
            3. 重做日志（redo log）缓存

        后台线程的作用是负责刷新内存池中的数据，保证缓冲池中的内存缓存的是最近的数据。

    后台线程
        InnoDB存储引擎是多线程的模型。
            1. Master Thread
                核心后台线程，主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性，包括脏页的刷新，合并插入缓冲，UNDO页的回收。。。
            2. IO Thread
                负责IO请求（AIO，Async IO）的回调处理。有4种类型 ： write，read， insert buffer， log
            3. Purge Thread
                事务被提交后，其所使用的undolog可能不再需要，因此需要PurgeThread来回收已经使用并分配的undo页。
            4. Page Cleaner Thread
                将脏页的刷新操作都放入到单独的线程中来完成。

    内存
        1. 缓冲池
            InnoDB存储引擎是基于磁盘存储的，并将其中的记录按照页的方式进行管理。由于CPU速度与磁盘速度的差距，基于磁盘的数据库系统通常使用缓冲池技术来提高数据库的整体性能
            磁盘中的页会被缓存在缓冲池中
            读取时先从缓存池中读取
            修改时，先修改在缓冲池中的页，然后再已一定的频率刷新到磁盘上。

            缓冲池中缓存的数据页类型： ./InnoDB内存数据对象.png
                1.索引页
                2.数据页
                3.undo页
                4.插入缓冲（insert buffer）
                5.自适应哈希索引（adaptive hash index）
                6.InnoDB存储的锁信息（lock info）
                7.数据字典信息（data dictionary）
                ...

            允许有多个缓冲池实例，每个页根据哈希值平均分配到不同的缓冲池实例中。

        2. 缓冲池中的LRU List，Free List 和 Flush List
            使用LRU算法来管理缓冲池。
            LRU List用来管理已经读取的页
            Free List用来存放可用的空闲页
            Flush List中的页即为脏页，同时存在于LRU List中

            在LRU列表中的页被修改后，称该页为脏页，这时数据库会通过CHECKPOINT机制将脏页刷新回磁盘

        3. 重做日志缓冲（redo log）
            InnoDB存储引擎首先将redo log 信息放入到这个缓冲区，然后按一定频率刷新到redo log 文件（每秒刷新）

        4. 额外的内存池


2.4 Checkpoint技术
    为了避免发生数据丢失的问题，当前事务数据库系统普遍都采用了Write Ahead Log策略。（即当事务提交时，先写重做日志，再修改页）

    checkpoint技术的目的是解决以下几个问题 ：   
        1. 缩短数据库的恢复时间
        2. 缓冲池不够用时，将脏页刷新到磁盘
        3. 重做日志不可用时，刷新脏页至少到当前重做日志的位置

    checkpoint所做的事情就是将缓冲池中的脏页刷回到磁盘。


2.5 Master Thread工作方式



2.6 InnoDB关键特性
    包括： 
        1. 插入缓冲 （insert buffer） change buffer 可视为 insert buffer 的升级
            使用前提 ：     
                1. 索引是辅助索引
                2. 索引不是唯一的（因为不会去查找索引页来判断插入的记录的唯一性）

            对于非聚集索引的插入或者更新操作，不是每一次直接插入到索引页中，而是先判断插入的非聚集索引页是否再缓冲池中，若在，则直接插入；若不在，先放入到一个Insert Buffer
            对象中，然后再以一定的频率和情况进行Insert Buffer和辅助索引页子节点的merge操作，这时通常能将多个插入合并到一个操作中（因为在一个索引页中），提高性能。

        2. 两次写 （double write）
            当写入失效发生时（例如写入某个页到表中，只写了一部分，之后宕机），先通过页的副本来还原该页，再应用redo log进行重做，这就是double write
            ？？？

        3. 自适应哈希索引 （Adaptive Hash Index）
            InnoDB存储引擎会监控对表上各索引页的查询。如果观察到建立哈希索引可带来速度提升，则建立哈希索引，这称之为自适应哈希索引。

        4. 异步IO （Async IO）
            为了提高磁盘操作性能，当前的数据库系统都采用异步IO的方式来处理磁盘操作。通过AIO可以将多个IO写入操作合并为一个IO操作

        5. 刷新邻接页 （Flush Neighbor Page）
            当刷新一个脏页时，会检测该页所在区（extent）的所有页，如果是脏页，那么一起进行刷新


2.7 启动，关闭于恢复
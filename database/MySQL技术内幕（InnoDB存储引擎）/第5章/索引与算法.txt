第五章 索引与算法
    
    如果知道数据的使用，从一开始就应该在需要处添加索引，而非事后（值得讨论?）

5.1 InnoDB存储引擎索引概述
    InnoDB存储引擎支持以下几种常见的索引 ：     
        1. B+树索引
        2. 全文索引
        3. 哈希索引

        InnoDB中支持的哈希索引是自适应的，其会根据表的使用情况自动为表生成哈希索引，不能人为干预是否在一张表中生成哈希索引

        B+树索引并不能找到一个给定键值的具体行，而只能找到被查找数据行所在的页。然后把页读入到内存，再在内存中查找，最后找到数据。

        每页Page Directory中的槽是按照主键的顺序存放的，对于某一条具体记录的查询是通过对Page Directory进行二分查找得到的

5.2 数据结构与算法
    二叉查找树
        1. 二叉
        2. 左子树的键值总是小于根的键值，右子树的键值总是大于根的键值
        3. 中序遍历可以得到键值的排序输出
        4. 二叉查找树可以任意地构造，同样的数据可能得到不同的树

    平衡二叉树（AVL树，即一棵平衡的二叉查找树）
        1. 符合二叉查找树的定义
        2. 任何节点的两个子树的高度最大差为1

        维护一棵平衡二叉树需要不小的代价。通常需要1次或多次左旋和右旋来得到插入\更新\删除后树的平衡性。不过因为是在内存中操作，所以还可接受。


5.3 B+树    
    由B树和索引顺序访问方法（ISAM）演化而来。

    B+树是为磁盘或其他直接存取辅助设备设计的一种平衡查找树，所有的记录节点都是按照键值的大小顺序存放在同一层的叶子节点上，由各叶子节点指针进行连接。

    为了保持平衡，需要进行拆分页操作和旋操作。因为B+树结构主要用于磁盘，页的拆分意味着磁盘操作

    B+树使用填充因子（fill factor）来控制树的删除变化，50%是填充因子可设的最小值。

    
5.4 B+树索引
    B+树索引在数据库中有一个特点是高扇出性，因此在数据库中，B+树的高度一般在2~4层。
    
    聚集索引与辅助索引不同的是，叶子节点存放的是否是一整行的信息。

    聚集索引
        按照每张表的主键构造一棵B+树，同时叶子节点中存放的即为整张表的行记录数据，也将聚集索引的叶子节点称为数据页。

        因为若聚集索引必须按照特定顺序存放物理记录，则维护成本显得非常高。所以，聚集索引的存储并不是物理上连续的，而是逻辑上连续的。

        每个页中的记录也是通过双向链表进行维护的，物理存储上同样不按照主键存储


    辅助索引（非聚集索引）
        通过辅助索引查找到聚集索引中的主键，然后通过主键查找聚集索引


    索引的创建与删除
        ALTER TABLE tbl_name
        | ADD { INDEX | KEY } { index_name }
        [index_type] {index_col_name,...} [index_option] ...

        ALTER TABLE tbl_name
        DROP PRIMARY KEY
        | DROP { INDEX | KEY } index_name

        CREATE [UNIQUE] INDEX index_name
        [index_type]
        ON tbl_name (index_col_name,...)

        DROP INDEX index_name ON tbl_name

        索引创建时会阻塞表上的DML操作。


5.5 Cardinality值
    如果某个字段的取值范围很广，几乎没有重复，则属于高选择性，否则属于低选择性

    SHOW INDEX FROM tbl_name;//其中的Cardinality的表示索引中不重复记录数量的预估值

    在访问高选择性的字段，并且从表中取出很少一部分数据时，对这个字段添加B+树索引非常有必要

    InnoDB存储引擎内部对更新Cardinality信息的策略为： 
        1. 表中1/16的数据已经发生过变化
        2. stat_modified_counter > 2000000000

    通过采样得到预估值


5.6 B+树索引的使用
    联合索引
        对多个列进行索引
        最左前缀原则

    覆盖索引
        即从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录。
        使用覆盖索引的一个好处是辅助索引不包含整行记录的所有信息，故其大小要远小于聚集索引，因此可以减少大量的IO操作

    优化器选择不使用索引的情况
        1. 多发生于范围查找，JOIN连接操作等
        2. 对于不能进行索引覆盖的情况，优化器选择辅助索引的情况是，通过辅助索引查找的数据是少量的。

    索引提示
        显式告诉优化器使用哪个索引

        使用场景 ：     
            1. 优化器错误地选择了某个索引
            2. 某SQL语句可以选择的索引非常多，导致优化器选择执行计划时间的开销可能大于SQL语句本身



5.7 哈希算法
    在数据库中一般采用最简单的碰撞解决技术，即链接法（chaining）

    在InnoDB中，哈希函数采用除法散列方式 ： 取模

    

    自适应哈希索引
        关键字 K = space_id<<20 + space_id + offset (space_id : 表空间id   offset : 页在表空间中的偏移量)

        只能用来搜索等值的查询


5.8 全文索引
    从InnoDB1.2.x开始，开始支持全文检索

    倒排索引
        全文索引通常使用倒排索引(inverted index)来实现



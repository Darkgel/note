JSON Web Token（JWT）
1.是什么？  
	是一个规范，标准
2.目的？
	使用JWT在用户和服务器之间传递安全可靠的信息。
3.组成
	由三部分组成：头部、载荷与签名
	载荷：将下面的json对象进行base64编码后得到载荷
		{
		    "iss": "John Wu JWT",
		    "iat": 1441593502,
		    "exp": 1441594722,
		    "aud": "www.example.com",
		    "sub": "jrocket@example.com",
		    "from_user": "B",
		    "target_user": "A"
		}
		前5个字段有JWT标准定义
		iss: 该JWT的签发者
		sub: 该JWT所面向的用户
		aud: 接收该JWT的一方
		exp(expires): 什么时候过期，这里是一个Unix时间戳
		iat(issued at): 在什么时候签发的

	头部：用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。同样的进行base64编码
		{
		  "typ": "JWT",
		  "alg": "HS256"
		}
	签名：
		1.将上面的两个编码后的字符串都用句号“.”连接在一起（头部在前）
		2.用上面的的HS256算法加密（秘钥在服务器端）
		3.得到签名

	将签名拼接在被签名的字符串后（即签名中的1），得到完整的JWT

使用
	1.web服务器将jwt作为token附加在一个url后，发送给客户
	2.客户点击url，即相当于确认操作
	3.web服务器收到确认操作，确认签名无误后，执行jwt中的操作

	在登录认证中使用：
		作为cookie的一部分返回给客户
		载荷中可以包含的信息有id，是否管理员，用户所在的分组等


注意
	1.载荷中的内容只经过了base64编码，信息会暴露，所以不应该包含敏感信息（加密试一下）


在认证中使用的时候与session的差异：
	Session方式存储用户id的最大弊病在于要占用大量服务器内存，对于较大型应用而言可能还要保存许多的状态。一般而言，大型应用还需要借助一些KV数据库和一系列缓存机制来实现Session的存储。而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。除了用户id之外，还可以存储其他的和用户相关的信息，例如该用户是否是管理员、用户所在的分桶（见[《你所应该知道的A/B测试基础》一文](/2015/08/27/introduction-to-ab-testing/）等。虽说JWT方式让服务器有一些计算压力（例如加密、编码和解码），但是这些压力相比磁盘I/O而言或许是半斤八两。具体是否采用，需要在不同场景下用数据说话。
	
使用 JWT 通常都會放置在 localStorage 然後送出時包含在 Request Header 中
第一章 What Are Algorithms and Why Should You Care?
    

第二章 How to Describe and Evaluate Computer Algorithms

    执行次数：
        最坏情况下的执行次数
        最好情况下的执行次数，有时候最好情况下的执行次数不依赖于n，而是一个常量

    大O：
        f(n) = O(g(n))
        即使n足够大时，f(n)总是小于某个常量乘以g(n)（即常量乘以g(n)是上界）

        用大O 标记来表示复杂度不会超过某个常量乘以g(n)

    大Ω：
        f(n) = Ω(g(n))
        即使n足够大，f(n)总是大于某个常量乘以g(n) (即常量乘以g(n)是下界)

        用大Ω 标记来表示复杂度一定超过某个常量乘以g(n)

    若f(n) = O(g(n)) 且 f(n) = Ω(g(n))， 则f(n) = Θ(g(n))

    不论是O(g(n))，Ω(g(n))还是Θ(g(n))，都可以分最坏情况和最好情况分别讨论,（通常会讨论最坏情况）。即O(g(n))，Ω(g(n)),Θ(g(n))没有必然联系


第三章 Algorithms for Sorting and Searching
    查找
        在元素是无序的情况下，只能线性查找（一个接一个）。（此处查找的目标是找到给定值的索引）

        在元素有序的情况下：
            binary search（二分查找）: O(lgn)

        通常不应该考虑将无序的元素排序后再进行查找，除非是排序后可以进行多次查找。（因为排序算法的时间复杂度通常为O(n^2)或O(nlgn)）

    排序(通常可以看作在数组这一数据结构的基础上进行排序)
        selection sort（选择排序）
            多次遍历未排序元素，每次选择出最大/最小的元素，放到有序序列中
            (n-1) + (n-2) + (n-3) + ... + 2 + 1 = (n-1)n/2
            O(n^2)

        insertion sort（插入排序）
            每次从未排序元素中取出一个待排序元素，遍历已排序序列，找到当前待排序的位置然后插入
            1 + 2 + 3 + ... + (n-2) + (n-1) = (n-1)n/2
            O(n^2)

        merge sort（合并排序）
            需要新开辟内存空间

            O(nlgn)

            对于每个子序列，将其均分为两个子序列，对子序列排序（递归）;合并排序后的两个子序列
            合并操作：因为两个子序列是有序的，所以每次从两个子序的头部/尾部中取出较大/较小者，放到合并后序列中,合并时的复杂度为O(n)

            使用递归的思想：
                divide：将大问题分解为小问题
                conquer：解决最基本的小问题
                combine：合并小问题的解（合并排序的关键操作在这）

        quicksort（快速排序）
            类似归并排序，使用了递归

            与合并排序不同：
                1.快排可以在原位排序，不需要新开辟内存空间
                2.最坏情况为Θ(n^2),平均情况为Θ(nlgn)

            将数组分成L（left group），R（right group），U（unknown group），P（pivot）
                每次以子数组的末尾为pivot，遍历子数组，当value小于等于pivot时，将value与R数组的最左元素交换


第四章 A Lower Bound for Sorting and How to Beat It
    若排序算法依赖于对sort key之间的大小比较，则基本无法优于O(nlgn),若有更多关于sort key的信息，则有可能达到更低的时间复杂度

    而对于任何排序算法来说，复杂度不可能比Ω(n)更低

    comparison sort ： sorting algorithm that determines the sorted order only by comparing pairs of elements
        In the worst case, any comparison sorting algorithm for n elements requires Ω(nlgn) comparisons between pairs of elements

    counting sort
        sort key 可能有 m 种可能值

        计算出sort key 每个值出现的次数，放入一个统计数组中，根据统计数组排序原数组

        步骤：
            1.根据原数组求equal数组
            2.根据equal 数组求less数组
            3.根据less 数组得到排序后的数组（next 数组辅助）

    Radix sort（基数排序）
        拆分 sort key ，多次使用 counting sort


第五章 Directed Acyclic Graphs（有向无环图）

    Topological sorting （拓扑排序）
        对于有向无环图，每次取出入度为0的节点到排序序列中，从有向无环图中删除该节点。

    有向图的表示
        邻接矩阵：
            矩阵中(u,v)代表节点u 到节点v 的边，可以用一个足够大的值（或0）表示u和v不邻接

        邻接表
            用一个列表来记录每个节点的邻接节点（以及节点之间的边）

    Critical path in a PERT chart （关键路径）
        PERT chart ： program evaluation and review technique
        关键路径： 
            路径 ： 
                A path in a graph is a sequence of vertices and edges that allow you to get from one vertex to another (or back to itself)
                we say that the path contains both the vertices on it and the edges traversed

            A critical path in a PERT chart is a path for which the sum of the task times is maximum over all paths。（消耗最大的路径）
            AOE-网中，从起点到终点最长的路径的长度（长度指的是路径上边的权重和）即关键路径，关键路径可以有多条

            关键路径决定了整个流程的最小消耗

        如何求关键路径：    
            为了简化操作，可以在所有入度为0的节点前添加起始节点，在所有出度为0的节点后添加终止节点。(AOE网)
            将权重反转为为负值，然后关键路径的计算就是找到从起始节点到终止节点的最短路径

    Shortest path in a directed acyclic graph
        single-source shortest paths ：计算一个节点到所有其他节点的最短路径


第六章 最短路径
    1. 针对dag（有向无环图）的single-source shortest paths（算法复杂度O(n+m)）
        a.先计算图的拓扑排序
        b.初始化数组shortest 和数组 pred
        c.使用拓扑排序后的边的，依次计算当前的最短路径

    2. single-pair shortest path（计算某两点之间的最短路径）
        Dijkstra算法
            前提 ： 
                1. 所有边的权重为非负数
                2. 可以有环

            思想： 
                It starts by sending out runners from the source vertex to all adjacent vertices. 
                The first time a runner arrives at any vertex, runners immediately leave that vertex, headed to all of its adjacent vertices

                当某个顶点被“到达”，则该runner的路径是到该点的最短路径

            算法 ： 
                1.初始化数组shortest和数组pred
                2.设集合Q包含所有的顶点
                3.当集合Q不为空时，进行以下循环：
                    a. 找到集合Q中顶点u的最短路径(已经不存在到达顶点u的边?)，然后从集合Q中删除顶点u
                    b. 对所有从u出发的顶点
                        i. 调用RELAX(u,v)


        Bellman-Ford算法
            前提 ：
                1.边的权重可以为负数
                2.可以有环

            

    3. all-pairs shortest path（计算图中所有顶点之间的最短路径）
        Floyd-Warshall算法
            关键点 ： 任何最短路径的子路径都是最短路径
            前提：
                1.可以有负权重的边，但是不能有负权重的环

            

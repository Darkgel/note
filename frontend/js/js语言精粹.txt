第二章 语法
	建议使用//代替/* */（块注释），因为块注释会出现在正则表达式的字面量里，造成出错

	js只有一个数字类型。其内部表示为64位的浮点数

	NaN是一个数值，它表示一个不能产生正常结果的运算结果。NaN不等于任何值，包括它自己（可用isNaN(number)检测NaN）

	Infinity表示所有大于1.79769313486231570e+308的值

	js没有字符类型。要表示一个字符，只需要创建仅包含一个字符的字符串即可

	字符串是不可变的。一旦字符串被创建，就永远无法改变它

	两个包含着完全相同的字符且字符顺序页相同的字符串被认为是相同的字符串  ： 'c' + 'a' + 't' === 'cat'  (为true)

	当var 语句被用在函数内部时，它定义的是这个函数的私有变量

	js中的代码块不会创建新的作用域，因此变量应该被定义在函数的头部，而不是在代码块中


	下面列出的值被当做假(falsy): false, null, undefined, 空字符串 '', 数字0， 数字NaN  （其他的则全当做真，包括true，所有的对象等。。。）

	for in语句，枚举一个对象的所有属性名：
		for(myvar in obj) {
			if(obj.hasOwnProperty(myvar)){
				...
			}
		}

	return语句如果没有指定返回表达式，name返回值为undefined

	字面量 ：number literal， string literal， object literal， array literal， function， regexp literal
		对象字面量是一种可以方便地按照指定规格创建新对象的表示法





第三章  对象 
	js的简单数据类型包括数字，字符串，布尔值，null，undefined。其他所有的值都是对象

	js中的数字、字符串和布尔值“貌似”对象，因为它们拥有方法，但它们是不可变的。

	对象是属性的容器，其中每个属性都拥有名字和值。
		属性的名字可以是包括空字符串在内的任意字符串
		属性值可以是除undefined之外的任何值


	尝试从undefined的成员属性中取值将会导致TypeError异常，这是可以通过&&运算符来避免错误。
		flight.equipment                            //undefined
		flight.equipment.model						//throw "TypeError"
		fligth.equipment && flight.equipment.model  //undefined

	对象通过引用来传递，他们永远不会被复制

	每个对象都连接到一个原型对象，并且它可从中继承属性。所有通过字面量创建的对象都连接到Object.prototype,它是js中的标配对象

	使用hasOwnProperty来检查对象独有的属性（即不会检查原型链，而且会排除函数类型）

	for in 语句会遍历一个对象中的所有属性名。该枚举过程将会列出所有的属性——包括函数和原型中的属性

	delete运算符用来删除对象的属性。不会触及原型链中的任何对象




第四章 函数
	函数对象连接到Function.prototype (Function.prototype 连接到 Object.prototype)
	每个函数在创建时会附加连个隐藏属性：函数的上下文和实现函数行为的代码

	一个内部函数除了可以访问自己的参数和变量，同时它也能自由访问把它嵌套在其中的父函数的参数与变量。通过函数字面量创建的函数对象包含一个连接到外部上下文的链接，这被称为闭包

	除了声明时定义的形式参数，每个函数还接收两个附加的参数：this 和 argument

	js中一共有4中调用模式 ： 方法调用模式、函数调用模式、构造器调用模式、apply调用模式
		方法调用模式：
			当一个函数被保存为对象的一个属性时，我们称它为方法
			当一个方法被调用时，this被绑定到该对象

		函数调用模式：
			当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的
			以函数调用模式来调用函数时，this被绑定到全局对象

		构造器调用模式
			在一个函数的前面带上new来调用
			一个函数，如果创建的目的就是希望结合new前缀来调用，那它就被称为构造器函数

		apply调用模式


	如果函数调用时在前面加上了new前缀，且返回值不是一个对象，则返回this

	最好的做法是，在函数体的顶部声明函数中可能用到的所有变量(以为js缺少块级作用域)

	内部函数能访问外部函数的实际变量而无须复制！！！

	可以使用函数和闭包来构造模块，模块是一个提供接口却隐藏状态与实现的函数或对象

	柯里化允许我们把函数与传递给它的参数相结合，产生出一个新的函数





第五章 继承
	js是一门基于原型的语言，这意味着对象直接从其他对象继承




第六章 数组
	length属性的值是这个数组的最大证书属性名加上1， 它不一定等于数组里的属性的个数
	



第七章 正则表达式
	可处理正则表达式的方法有 ：regexp.exec, regexp.test, string.match string.replace, string.search, string.split,  

	正则表达式分组 ： 捕获型()， 非捕获型(?:)， 向前正向匹配(?=）, 向前负向匹配(?!) 


第八章 方法



第九章 代码风格



全局对象是所有全局变量的容器，在web浏览器里，全局对象名为window
	
